package edu.uap.tripla;

import java_cup.runtime.*;

/**
 * Grammar for the TRIPLA-Parser.  
 *
 * @author Richard Kiefer, s4rikief@uni-trier.de
 */


/* Terminals (tokens returned by the scanner). */
terminal String OP, OP_ADD, OP_SUB, OP_MULT, OP_DIV, OP_EQ, OP_NEQ, OP_LT, OP_GT;
terminal String ID;
terminal Symbol COMMA, LPAREN, RPAREN, LCPAREN, RCPAREN;
terminal Symbol LET, IN, ASSIGN, IF, THEN, ELSE, SEMIC;
terminal Integer CONST;

/* Non terminals */
non terminal Identifier[] v;
non terminal Identifier id_;
non terminal FunctionDeclaration[] d;
non terminal FunctionDeclaration d_;
non terminal AbstractSyntaxTree e;
non terminal ArgumentSequence a;
non terminal Operation op_;

/* @TODO take care of operators-precedence and -associativity !!! */

/* Precedences */
precedence left OP_EQ, OP_NEQ;
precedence left OP_LT, OP_GT;
precedence left OP_ADD, OP_SUB;
precedence left OP_MULT, OP_DIV;

/* The grammar */
start with e;

e ::= LET d:def IN e:exp
        {: RESULT = new Program(def, exp); :}
      | id_:id ASSIGN e:exp
        {: RESULT = new Assignment(id,
                                   exp);
         :}
      | IF e:condition THEN e:consequent ELSE e:alternative
        {: RESULT = new Conditional(condition,
                                    consequent,
                                    alternative);
         :}
      | op_:op
        {: RESULT = op; :}
      | e:e1 SEMIC e:e2
        {: RESULT = new StatementSequence(e1,
                                          e2);
         :}
      | id_:id
        {: RESULT = id; :}
      | id_:id LPAREN a:args RPAREN
        {: RESULT = new FunctionCall(id, args); :}
      | LPAREN e:exp RPAREN
        {: RESULT = exp; :}
      | CONST:c
        {: RESULT = new Constant(c); :}
  ;


op_ ::= e:e1 OP_ADD:o e:e2
        {: RESULT = new Operation(e1, o, e2); :}  
      | e:e1 OP_SUB:o e:e2
        {: RESULT = new Operation(e1, o, e2); :}
      | e:e1 OP_MULT:o e:e2
        {: RESULT = new Operation(e1, o, e2); :}
      | e:e1 OP_DIV:o e:e2
        {: RESULT = new Operation(e1, o, e2); :}
      | e:e1 OP_EQ:o e:e2
        {: RESULT = new Operation(e1, o, e2); :}
      | e:e1 OP_NEQ:o e:e2
        {: RESULT = new Operation(e1, o, e2); :}
      | e:e1 OP_LT:o e:e2
        {: RESULT = new Operation(e1, o, e2); :}
      | e:e1 OP_GT:o e:e2
        {: RESULT = new Operation(e1, o, e2); :}
    ;

a ::= e:exp
        {: RESULT = new ArgumentSequence(exp); :}
      | a:e1 COMMA e:e2
        {: RESULT = new ArgumentSequence(e1,
                                         e2);
         :}
  ;


d ::= d_:def
          {: RESULT = new FunctionDeclaration[] { def }; :} 
      | d:d1 d_:d2
          {: RESULT = d2.appendTo(d1); :} 
  ;
d_ ::= id_:id LPAREN v:vars RPAREN LCPAREN e:exp RCPAREN
         {: RESULT = new FunctionDeclaration(id,
                                             vars,
                                             exp);
          :}
   ;


v ::= id_:v1
        {: RESULT = new Identifier[] { v1 }; :} 
      | v:v1 COMMA id_:v2
        {: RESULT = v2.appendTo(v1); :} 
  ;


id_ ::= ID:ident
       {: RESULT = new Identifier(ident); :}
   ;