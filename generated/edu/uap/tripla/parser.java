
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sat Jun 21 16:39:06 CEST 2014
//----------------------------------------------------

package edu.uap.tripla;

import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Sat Jun 21 16:39:06 CEST 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\022\000\002\002\004\000\002\007\006\000\002\007" +
    "\005\000\002\007\010\000\002\007\005\000\002\007\005" +
    "\000\002\007\003\000\002\007\006\000\002\007\005\000" +
    "\002\007\003\000\002\010\003\000\002\010\005\000\002" +
    "\005\003\000\002\005\004\000\002\006\011\000\002\003" +
    "\003\000\002\003\005\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\053\000\014\005\005\007\011\013\006\016\012\022" +
    "\004\001\002\000\022\002\ufff8\004\ufff8\006\ufff8\010\ufff8" +
    "\012\ufff8\017\ufff8\020\ufff8\021\ufff8\001\002\000\026\002" +
    "\ufff0\004\ufff0\006\ufff0\007\ufff0\010\ufff0\012\ufff0\015\ufff0" +
    "\017\ufff0\020\ufff0\021\ufff0\001\002\000\004\005\005\001" +
    "\002\000\026\002\ufffb\004\ufffb\006\ufffb\007\030\010\ufffb" +
    "\012\ufffb\015\027\017\ufffb\020\ufffb\021\ufffb\001\002\000" +
    "\010\002\026\004\014\021\016\001\002\000\014\005\005" +
    "\007\011\013\006\016\012\022\004\001\002\000\014\005" +
    "\005\007\011\013\006\016\012\022\004\001\002\000\010" +
    "\004\014\017\015\021\016\001\002\000\014\005\005\007" +
    "\011\013\006\016\012\022\004\001\002\000\014\005\005" +
    "\007\011\013\006\016\012\022\004\001\002\000\014\005" +
    "\005\007\011\013\006\016\012\022\004\001\002\000\022" +
    "\002\ufffc\004\014\006\ufffc\010\ufffc\012\ufffc\017\ufffc\020" +
    "\ufffc\021\016\001\002\000\010\004\014\020\021\021\016" +
    "\001\002\000\014\005\005\007\011\013\006\016\012\022" +
    "\004\001\002\000\022\002\ufffe\004\014\006\ufffe\010\ufffe" +
    "\012\ufffe\017\ufffe\020\ufffe\021\016\001\002\000\022\002" +
    "\ufffd\004\014\006\ufffd\010\ufffd\012\ufffd\017\ufffd\020\ufffd" +
    "\021\016\001\002\000\010\004\014\010\025\021\016\001" +
    "\002\000\022\002\ufff9\004\ufff9\006\ufff9\010\ufff9\012\ufff9" +
    "\017\ufff9\020\ufff9\021\ufff9\001\002\000\004\002\001\001" +
    "\002\000\014\005\005\007\011\013\006\016\012\022\004" +
    "\001\002\000\014\005\005\007\011\013\006\016\012\022" +
    "\004\001\002\000\006\006\033\010\034\001\002\000\012" +
    "\004\014\006\ufff7\010\ufff7\021\016\001\002\000\014\005" +
    "\005\007\011\013\006\016\012\022\004\001\002\000\022" +
    "\002\ufffa\004\ufffa\006\ufffa\010\ufffa\012\ufffa\017\ufffa\020" +
    "\ufffa\021\ufffa\001\002\000\012\004\014\006\ufff6\010\ufff6" +
    "\021\016\001\002\000\022\002\uffff\004\014\006\uffff\010" +
    "\uffff\012\uffff\017\uffff\020\uffff\021\016\001\002\000\004" +
    "\007\045\001\002\000\006\005\ufff5\014\ufff5\001\002\000" +
    "\006\005\005\014\042\001\002\000\014\005\005\007\011" +
    "\013\006\016\012\022\004\001\002\000\006\005\ufff4\014" +
    "\ufff4\001\002\000\022\002\000\004\014\006\000\010\000" +
    "\012\000\017\000\020\000\021\016\001\002\000\004\005" +
    "\005\001\002\000\006\006\050\010\051\001\002\000\006" +
    "\006\ufff2\010\ufff2\001\002\000\004\005\005\001\002\000" +
    "\004\011\052\001\002\000\014\005\005\007\011\013\006" +
    "\016\012\022\004\001\002\000\010\004\014\012\054\021" +
    "\016\001\002\000\006\005\ufff3\014\ufff3\001\002\000\006" +
    "\006\ufff1\010\ufff1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\053\000\006\004\006\007\007\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\036\005\040\006\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\006\007\023\001\001\000\006\004\006\007\012\001\001" +
    "\000\002\001\001\000\006\004\006\007\022\001\001\000" +
    "\006\004\006\007\017\001\001\000\006\004\006\007\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\006\007\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\006\007\035\001\001\000\010\004\006\007\031" +
    "\010\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\006\007\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\036\006\042\001\001\000\006\004\006" +
    "\007\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\045\004\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\054\001\001\000\002\001\001\000" +
    "\006\004\006\007\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // id_ ::= ID 
            {
              Identifier RESULT = null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Identifier(ident); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*id_*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // v ::= v COMMA id_ 
            {
              Identifier[] RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier[] v1 = (Identifier[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Identifier v2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = v2.appendTo(v1); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*v*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // v ::= id_ 
            {
              Identifier[] RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Identifier v1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Identifier[] { v1 }; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*v*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // d_ ::= id_ LPAREN v RPAREN LCPAREN e RCPAREN 
            {
              FunctionDeclaration RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier[] vars = (Identifier[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxTree exp = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunctionDeclaration(id,
                                             vars,
                                             exp);
          
              CUP$parser$result = new java_cup.runtime.Symbol(4/*d_*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // d ::= d d_ 
            {
              FunctionDeclaration[] RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunctionDeclaration[] d1 = (FunctionDeclaration[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FunctionDeclaration d2 = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = d2.appendTo(d1); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*d*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // d ::= d_ 
            {
              FunctionDeclaration[] RESULT = null;
		int defleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FunctionDeclaration def = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FunctionDeclaration[] { def }; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*d*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // a ::= a COMMA e 
            {
              ArgumentSequence RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArgumentSequence e1 = (ArgumentSequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbstractSyntaxTree e2 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArgumentSequence(e1,
                                         e2);
         
              CUP$parser$result = new java_cup.runtime.Symbol(6/*a*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // a ::= e 
            {
              ArgumentSequence RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbstractSyntaxTree exp = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArgumentSequence(exp); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*a*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // e ::= CONST 
            {
              AbstractSyntaxTree RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Constant(c); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*e*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // e ::= LPAREN e RPAREN 
            {
              AbstractSyntaxTree RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxTree exp = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = exp; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*e*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // e ::= id_ LPAREN a RPAREN 
            {
              AbstractSyntaxTree RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArgumentSequence args = (ArgumentSequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunctionCall(id, args); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*e*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // e ::= id_ 
            {
              AbstractSyntaxTree RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = id; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*e*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // e ::= e SEMIC e 
            {
              AbstractSyntaxTree RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxTree e1 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbstractSyntaxTree e2 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new StatementSequence(e1,
                                          e2);
         
              CUP$parser$result = new java_cup.runtime.Symbol(5/*e*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // e ::= e OP e 
            {
              AbstractSyntaxTree RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxTree e1 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbstractSyntaxTree e2 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Operation(e1,
                                  o,
                                  e2);
         
              CUP$parser$result = new java_cup.runtime.Symbol(5/*e*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // e ::= IF e THEN e ELSE e 
            {
              AbstractSyntaxTree RESULT = null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AbstractSyntaxTree condition = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int consequentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int consequentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxTree consequent = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int alternativeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int alternativeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbstractSyntaxTree alternative = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Conditional(condition,
                                    consequent,
                                    alternative);
         
              CUP$parser$result = new java_cup.runtime.Symbol(5/*e*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // e ::= id_ EQ e 
            {
              AbstractSyntaxTree RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbstractSyntaxTree exp = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Assignment(id,
                                   exp);
         
              CUP$parser$result = new java_cup.runtime.Symbol(5/*e*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // e ::= LET d IN e 
            {
              AbstractSyntaxTree RESULT = null;
		int defleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FunctionDeclaration[] def = (FunctionDeclaration[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbstractSyntaxTree exp = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Program(def, exp); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*e*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= e EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxTree start_val = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

