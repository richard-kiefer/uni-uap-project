
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Jun 25 15:22:22 CEST 2014
//----------------------------------------------------

package edu.uap.tripla;

import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Wed Jun 25 15:22:22 CEST 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\032\000\002\002\004\000\002\007\006\000\002\007" +
    "\005\000\002\007\010\000\002\007\003\000\002\007\005" +
    "\000\002\007\003\000\002\007\006\000\002\007\005\000" +
    "\002\007\003\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\010\003" +
    "\000\002\010\005\000\002\005\003\000\002\005\004\000" +
    "\002\006\011\000\002\003\003\000\002\003\005\000\002" +
    "\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\072\000\014\015\005\017\011\023\006\026\013\032" +
    "\004\001\002\000\040\002\ufff8\005\ufff8\006\ufff8\007\ufff8" +
    "\010\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\016\ufff8\020" +
    "\ufff8\022\ufff8\027\ufff8\030\ufff8\031\ufff8\001\002\000\044" +
    "\002\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012" +
    "\uffe8\013\uffe8\014\uffe8\016\uffe8\017\uffe8\020\uffe8\022\uffe8" +
    "\025\uffe8\027\uffe8\030\uffe8\031\uffe8\001\002\000\004\015" +
    "\005\001\002\000\040\002\ufffd\005\ufffd\006\ufffd\007\ufffd" +
    "\010\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\016\ufffd\020" +
    "\ufffd\022\ufffd\027\ufffd\030\ufffd\031\ufffd\001\002\000\044" +
    "\002\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012" +
    "\ufffb\013\ufffb\014\ufffb\016\ufffb\017\046\020\ufffb\022\ufffb" +
    "\025\047\027\ufffb\030\ufffb\031\ufffb\001\002\000\014\015" +
    "\005\017\011\023\006\026\013\032\004\001\002\000\026" +
    "\002\043\005\015\006\016\007\022\010\020\011\023\012" +
    "\026\013\025\014\024\031\017\001\002\000\014\015\005" +
    "\017\011\023\006\026\013\032\004\001\002\000\026\005" +
    "\015\006\016\007\022\010\020\011\023\012\026\013\025" +
    "\014\024\027\021\031\017\001\002\000\014\015\005\017" +
    "\011\023\006\026\013\032\004\001\002\000\014\015\005" +
    "\017\011\023\006\026\013\032\004\001\002\000\014\015" +
    "\005\017\011\023\006\026\013\032\004\001\002\000\014" +
    "\015\005\017\011\023\006\026\013\032\004\001\002\000" +
    "\014\015\005\017\011\023\006\026\013\032\004\001\002" +
    "\000\014\015\005\017\011\023\006\026\013\032\004\001" +
    "\002\000\014\015\005\017\011\023\006\026\013\032\004" +
    "\001\002\000\014\015\005\017\011\023\006\026\013\032" +
    "\004\001\002\000\014\015\005\017\011\023\006\026\013" +
    "\032\004\001\002\000\014\015\005\017\011\023\006\026" +
    "\013\032\004\001\002\000\040\002\ufff2\005\015\006\016" +
    "\007\022\010\020\011\ufff2\012\ufff2\013\025\014\024\016" +
    "\ufff2\020\ufff2\022\ufff2\027\ufff2\030\ufff2\031\ufff2\001\002" +
    "\000\040\002\ufff1\005\015\006\016\007\022\010\020\011" +
    "\ufff1\012\ufff1\013\ufff1\014\ufff1\016\ufff1\020\ufff1\022\ufff1" +
    "\027\ufff1\030\ufff1\031\ufff1\001\002\000\040\002\ufff0\005" +
    "\015\006\016\007\022\010\020\011\ufff0\012\ufff0\013\ufff0" +
    "\014\ufff0\016\ufff0\020\ufff0\022\ufff0\027\ufff0\030\ufff0\031" +
    "\ufff0\001\002\000\040\002\ufff3\005\015\006\016\007\022" +
    "\010\020\011\ufff3\012\ufff3\013\025\014\024\016\ufff3\020" +
    "\ufff3\022\ufff3\027\ufff3\030\ufff3\031\ufff3\001\002\000\040" +
    "\002\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012" +
    "\ufff5\013\ufff5\014\ufff5\016\ufff5\020\ufff5\022\ufff5\027\ufff5" +
    "\030\ufff5\031\ufff5\001\002\000\026\005\015\006\016\007" +
    "\022\010\020\011\023\012\026\013\025\014\024\030\035" +
    "\031\017\001\002\000\014\015\005\017\011\023\006\026" +
    "\013\032\004\001\002\000\040\002\ufffe\005\015\006\016" +
    "\007\022\010\020\011\023\012\026\013\025\014\024\016" +
    "\ufffe\020\ufffe\022\ufffe\027\ufffe\030\ufffe\031\017\001\002" +
    "\000\040\002\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011" +
    "\ufff4\012\ufff4\013\ufff4\014\ufff4\016\ufff4\020\ufff4\022\ufff4" +
    "\027\ufff4\030\ufff4\031\ufff4\001\002\000\040\002\ufffc\005" +
    "\015\006\016\007\022\010\020\011\023\012\026\013\025" +
    "\014\024\016\ufffc\020\ufffc\022\ufffc\027\ufffc\030\ufffc\031" +
    "\017\001\002\000\040\002\ufff6\005\ufff6\006\ufff6\007\022" +
    "\010\020\011\ufff6\012\ufff6\013\ufff6\014\ufff6\016\ufff6\020" +
    "\ufff6\022\ufff6\027\ufff6\030\ufff6\031\ufff6\001\002\000\040" +
    "\002\ufff7\005\ufff7\006\ufff7\007\022\010\020\011\ufff7\012" +
    "\ufff7\013\ufff7\014\ufff7\016\ufff7\020\ufff7\022\ufff7\027\ufff7" +
    "\030\ufff7\031\ufff7\001\002\000\004\002\001\001\002\000" +
    "\026\005\015\006\016\007\022\010\020\011\023\012\026" +
    "\013\025\014\024\020\045\031\017\001\002\000\040\002" +
    "\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9" +
    "\013\ufff9\014\ufff9\016\ufff9\020\ufff9\022\ufff9\027\ufff9\030" +
    "\ufff9\031\ufff9\001\002\000\014\015\005\017\011\023\006" +
    "\026\013\032\004\001\002\000\014\015\005\017\011\023" +
    "\006\026\013\032\004\001\002\000\040\002\uffff\005\015" +
    "\006\016\007\022\010\020\011\023\012\026\013\025\014" +
    "\024\016\uffff\020\uffff\022\uffff\027\uffff\030\uffff\031\017" +
    "\001\002\000\030\005\015\006\016\007\022\010\020\011" +
    "\023\012\026\013\025\014\024\016\uffef\020\uffef\031\017" +
    "\001\002\000\006\016\053\020\054\001\002\000\014\015" +
    "\005\017\011\023\006\026\013\032\004\001\002\000\040" +
    "\002\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012" +
    "\ufffa\013\ufffa\014\ufffa\016\ufffa\020\ufffa\022\ufffa\027\ufffa" +
    "\030\ufffa\031\ufffa\001\002\000\030\005\015\006\016\007" +
    "\022\010\020\011\023\012\026\013\025\014\024\016\uffee" +
    "\020\uffee\031\017\001\002\000\004\017\064\001\002\000" +
    "\006\015\uffed\024\uffed\001\002\000\006\015\005\024\061" +
    "\001\002\000\014\015\005\017\011\023\006\026\013\032" +
    "\004\001\002\000\006\015\uffec\024\uffec\001\002\000\040" +
    "\002\000\005\015\006\016\007\022\010\020\011\023\012" +
    "\026\013\025\014\024\016\000\020\000\022\000\027\000" +
    "\030\000\031\017\001\002\000\004\015\005\001\002\000" +
    "\006\016\067\020\070\001\002\000\006\016\uffea\020\uffea" +
    "\001\002\000\004\015\005\001\002\000\004\021\071\001" +
    "\002\000\014\015\005\017\011\023\006\026\013\032\004" +
    "\001\002\000\026\005\015\006\016\007\022\010\020\011" +
    "\023\012\026\013\025\014\024\022\073\031\017\001\002" +
    "\000\006\015\uffeb\024\uffeb\001\002\000\006\016\uffe9\020" +
    "\uffe9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\072\000\010\004\007\007\011\011\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\055\005\057" +
    "\006\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\007\007\043\011\006\001\001\000\002\001\001" +
    "\000\010\004\007\007\013\011\006\001\001\000\002\001" +
    "\001\000\010\004\007\007\041\011\006\001\001\000\010" +
    "\004\007\007\040\011\006\001\001\000\010\004\007\007" +
    "\037\011\006\001\001\000\010\004\007\007\036\011\006" +
    "\001\001\000\010\004\007\007\033\011\006\001\001\000" +
    "\010\004\007\007\032\011\006\001\001\000\010\004\007" +
    "\007\031\011\006\001\001\000\010\004\007\007\030\011" +
    "\006\001\001\000\010\004\007\007\027\011\006\001\001" +
    "\000\010\004\007\007\026\011\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\007\007" +
    "\035\011\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\004\007\007\050\010\051\011\006\001\001\000\010\004" +
    "\007\007\047\011\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\007\007\054\011" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\055\006\061\001" +
    "\001\000\010\004\007\007\062\011\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\064\004\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\073" +
    "\001\001\000\002\001\001\000\010\004\007\007\071\011" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // id_ ::= ID 
            {
              Identifier RESULT = null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Identifier(ident); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*id_*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // v ::= v COMMA id_ 
            {
              Identifier[] RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier[] v1 = (Identifier[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Identifier v2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = v2.appendTo(v1); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*v*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // v ::= id_ 
            {
              Identifier[] RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Identifier v1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Identifier[] { v1 }; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*v*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // d_ ::= id_ LPAREN v RPAREN LCPAREN e RCPAREN 
            {
              FunctionDeclaration RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier[] vars = (Identifier[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxTree exp = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunctionDeclaration(id,
                                             vars,
                                             exp);
          
              CUP$parser$result = new java_cup.runtime.Symbol(4/*d_*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // d ::= d d_ 
            {
              FunctionDeclaration[] RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunctionDeclaration[] d1 = (FunctionDeclaration[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FunctionDeclaration d2 = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = d2.appendTo(d1); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*d*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // d ::= d_ 
            {
              FunctionDeclaration[] RESULT = null;
		int defleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FunctionDeclaration def = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FunctionDeclaration[] { def }; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*d*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // a ::= a COMMA e 
            {
              ArgumentSequence RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArgumentSequence e1 = (ArgumentSequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbstractSyntaxTree e2 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArgumentSequence(e1,
                                         e2);
         
              CUP$parser$result = new java_cup.runtime.Symbol(6/*a*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // a ::= e 
            {
              ArgumentSequence RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbstractSyntaxTree exp = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArgumentSequence(exp); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*a*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // op_ ::= e OP_GT e 
            {
              Operation RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxTree e1 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbstractSyntaxTree e2 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Operation(e1, o, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*op_*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // op_ ::= e OP_LT e 
            {
              Operation RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxTree e1 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbstractSyntaxTree e2 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Operation(e1, o, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*op_*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // op_ ::= e OP_NEQ e 
            {
              Operation RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxTree e1 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbstractSyntaxTree e2 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Operation(e1, o, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*op_*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // op_ ::= e OP_EQ e 
            {
              Operation RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxTree e1 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbstractSyntaxTree e2 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Operation(e1, o, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*op_*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // op_ ::= e OP_DIV e 
            {
              Operation RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxTree e1 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbstractSyntaxTree e2 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Operation(e1, o, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*op_*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // op_ ::= e OP_MULT e 
            {
              Operation RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxTree e1 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbstractSyntaxTree e2 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Operation(e1, o, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*op_*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // op_ ::= e OP_SUB e 
            {
              Operation RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxTree e1 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbstractSyntaxTree e2 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Operation(e1, o, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*op_*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // op_ ::= e OP_ADD e 
            {
              Operation RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxTree e1 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbstractSyntaxTree e2 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Operation(e1, o, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*op_*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // e ::= CONST 
            {
              AbstractSyntaxTree RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Constant(c); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*e*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // e ::= LPAREN e RPAREN 
            {
              AbstractSyntaxTree RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxTree exp = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = exp; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*e*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // e ::= id_ LPAREN a RPAREN 
            {
              AbstractSyntaxTree RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArgumentSequence args = (ArgumentSequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunctionCall(id, args); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*e*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // e ::= id_ 
            {
              AbstractSyntaxTree RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = id; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*e*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // e ::= e SEMIC e 
            {
              AbstractSyntaxTree RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxTree e1 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbstractSyntaxTree e2 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new StatementSequence(e1,
                                          e2);
         
              CUP$parser$result = new java_cup.runtime.Symbol(5/*e*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // e ::= op_ 
            {
              AbstractSyntaxTree RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = op; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*e*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // e ::= IF e THEN e ELSE e 
            {
              AbstractSyntaxTree RESULT = null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AbstractSyntaxTree condition = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int consequentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int consequentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxTree consequent = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int alternativeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int alternativeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbstractSyntaxTree alternative = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Conditional(condition,
                                    consequent,
                                    alternative);
         
              CUP$parser$result = new java_cup.runtime.Symbol(5/*e*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // e ::= id_ ASSIGN e 
            {
              AbstractSyntaxTree RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbstractSyntaxTree exp = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Assignment(id,
                                   exp);
         
              CUP$parser$result = new java_cup.runtime.Symbol(5/*e*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // e ::= LET d IN e 
            {
              AbstractSyntaxTree RESULT = null;
		int defleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FunctionDeclaration[] def = (FunctionDeclaration[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbstractSyntaxTree exp = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Program(def, exp); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*e*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= e EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxTree start_val = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

